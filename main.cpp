//
// - Паттерны проектирования -
// 
//  Анализ существующих тенденций в программном обеспечении
// 1. Кристофер Александр от архитектуры
// 2. К ООП Кент Бэк и Вард Каннигем
// 3. Эрих Гамма обобщение для разработки
// 4. Джеймс Коплин - С++
// 5. Банда четырех - собрали все в одну статистику
// 6. Enterprice. Мартин Фаулер
// 7. Рефакторинг. Джошуа Криевски
// 8. Эпоха паттернов тестирования
// 
// 
// Паттерн проектирования (design pattern) - это обобщенное решение, описание взаимодействия объектов и классов,
// адаптированных для решения общей задачи проектирования в конкретном контексте [GoF95].
// Цель паттерна - распознать возможность применения хорошего решения проблемы.
//  
// Каждый паттерн состоит из 
//   - Имя
//   - Задача
//   - Решения
//   - Результаты
// 
// Антипаттерн (антишаблон) - это часто повторяемое плохое решение, которое не рекомендуется использовать
// Цель антипаттерна - обнаружить плохую ситуацию и предлжить подход к ее устранению
// 
// Идиома - паттерны для конкретных языков программирования.
// 
// При разработке дизайна системы следует руководствоваться такими базовыми принципами:
//   - Всегда формировать простой дизайн:
//      из двух предлженных решений как правило лучшим является то что проще
//   - Слабая завиисимость:
//      дизайн модуля должен быть таким чтобы в случае его модификации зависимые фрагменты 
//      системы не требовали или почти не требовали изменений
// 
// Признаки плохого кода: 
//  - Дубляж кода
//  - Большие методы
//  - Большие классы
//  - Зависть (почти все - другие чужие части)
//  - Нарушение приватности
//  - Нарушение завещания (соглашения с пользователем как будут взаимодейтсвовать методы с пользователем)
//  - Ленивый класс
//  - Чрезменрная сложность
//  - Чрезмерно длинные идентификаторы (названия классов)
// 
// Принципы выбора паттернов проектирования:
//  - Решайте проблему, а не раздувайте функционал
//  - Первична задача, а не паттерн
//  - Не вводить сложные паттерны если можно обойтись простыми
//  - Абстрагируйтесь от деталей реализации до того как писать код
// 
// Принципы разделения паттернов на категории:
//  - Архитектурные паттерны
//  - Паттерны проектирования 
//  - Паттерны анализа
//  - Паттерны тестирования
//  - Паттерны реализации
// 
// Паттерны проектирования разделенные по назначению:
//  - Порождающие паттерны 
//  - Структурные паттерны 
//  - Поведенческие паттерны
//  - Паттерны GRASP
//  - Принципы SOLID
// 
// 
// Принципы SOLID:
//	Single responsibility principle 
//  Open-closed principle - открыта для расширения и закрыта для изменения
//  Liskov substitution principle - базовые и наследственные классы (...)
//  Interface segregation principle - много интерфейсов отдельного назначения лучше чем один общий
//  Dependecy invertion principle - не человек пинает табуретку, а табуретка пнутая
// 
// Паттерны GRASP
//		
// 
// 